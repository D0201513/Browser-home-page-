- name: Collect Inventory from All Systems
  hosts: all
  gather_facts: true
  become: true
  vars:
    output_dir: "/tmp/asset_inventory"
    control_node_ip: "172.17.9.132"                  # Your AWX control node IP
    control_node_path: "/opt/awx-inventory-facts"    # Folder must exist or be created
    control_node_user: "mduroot"                     # Must support passwordless SSH

  tasks:
    - name: Run only on Linux
      when: ansible_os_family != 'Windows'
      block:

        - name: Ensure output directory exists
          ansible.builtin.file:
            path: "{{ output_dir }}"
            state: directory
            mode: '0755'

        - name: Get CPU model
          shell: "lscpu | grep 'Model name' | awk -F: '{print $2}'"
          register: cpu_model_output
          changed_when: false

        - name: Set CPU model and generation
          set_fact:
            cpu_model: "{{ cpu_model_output.stdout | default('Unknown') | trim }}"
            cpu_generation: >-
              {% set match = cpu_model_output.stdout | regex_search('i[3579]-([0-9]{4,5})[A-Z]*', '\\1') %}
              {% if match is not none %}
                {% if match | length == 5 %}
                  {{ match[:2] }}th Gen
                {% elif match | length == 4 %}
                  {{ match[:1] }}th Gen
                {% else %}
                  Unknown
                {% endif %}
              {% else %}
                Unknown
              {% endif %}

        - name: Get system serial number
          shell: "dmidecode -s system-serial-number"
          register: serial_output
          changed_when: false

        - name: Set Linux memory and identity facts
          set_fact:
            serial_number: "{{ serial_output.stdout | default('Unknown') | trim }}"
            mac_address: "{{ ansible_default_ipv4.macaddress | default('') }}"
            ram_mb_used: "{{ ansible_memory_mb.real.used | default(0) }}"
            ram_mb_total: "{{ ansible_memory_mb.real.total | default(0) }}"
            ram_used_pct: "{{ ((ansible_memory_mb.real.used | default(0)) * 100) // (ansible_memory_mb.real.total | default(1)) }}"

        - name: Collect asset data
          set_fact:
            asset_data: {
              "hostname": "{{ ansible_hostname }}",
              "ip_address": "{{ ansible_default_ipv4.address | default('') }}",
              "mac_address": "{{ mac_address }}",
              "cpu_model": "{{ cpu_model }}",
              "cpu_generation": "{{ cpu_generation }}",
              "ram_mb_used": "{{ ram_mb_used }}",
              "ram_mb_total": "{{ ram_mb_total }}",
              "ram_used_pct": "{{ ram_used_pct }}",
              "serial_number": "{{ serial_number }}",
              "disk_info": "{{ ansible_devices | default({}) }}",
              "os": "{{ ansible_distribution ~ ' ' ~ ansible_distribution_version | default('Unknown') }}",
              "kernel": "{{ ansible_kernel | default('') }}"
            }

        - name: Save asset inventory to JSON on Linux
          copy:
            dest: "{{ output_dir }}/asset_{{ inventory_hostname }}.json"
            content: "{{ asset_data | to_nice_json }}"
            mode: '0644'

        - name: Ensure control node destination directory exists (optional)
          delegate_to: localhost
          run_once: true
          file:
            path: "{{ control_node_path }}"
            state: directory
            mode: '0755'

        - name: Send JSON to Control Node via SCP
          shell: >
            scp {{ output_dir }}/asset_{{ inventory_hostname }}.json
            {{ control_node_user }}@{{ control_node_ip }}:{{ control_node_path }}/
          args:
            executable: /bin/bash
          register: scp_result
          ignore_errors: false

        - name: Show SCP output for debugging
          debug:
            var: scp_result.stderr_lines
