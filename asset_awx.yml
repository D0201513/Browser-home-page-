- name: Collect Asset Inventory from All Systems
  hosts: all
  gather_facts: true
  become: "{{ ansible_os_family != 'Windows' }}"
  vars:
    output_dir: "/tmp/asset_inventory"

  pre_tasks:
    - name: Ensure output directory exists on client
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'

  tasks:
    - name: Get CPU model (Linux only)
      when: ansible_os_family != 'Windows'
      shell: "lscpu | grep 'Model name' | awk -F: '{print $2}'"
      register: cpu_model_output
      changed_when: false

    - name: Set CPU model and generation (Linux only)
      when: ansible_os_family != 'Windows'
      set_fact:
        cpu_model: "{{ cpu_model_output.stdout | default('Unknown') | trim }}"
        cpu_generation: >-
          {% set match = cpu_model_output.stdout | regex_search('i[3579]-([0-9]{4,5})[A-Z]*', '\\1') %}
          {% if match is not none %}
            {% if match | length == 5 %}
              {{ match[:2] }}th Gen
            {% elif match | length == 4 %}
              {{ match[:1] }}th Gen
            {% else %}
              Unknown
            {% endif %}
          {% else %}
            Unknown
          {% endif %}

    - name: Set CPU facts for Windows
      when: ansible_os_family == 'Windows'
      set_fact:
        cpu_model: "{{ ansible_processor[1] | default('Unknown') }}"
        cpu_generation: "Unknown"

    - name: Get system serial number (Linux only)
      when: ansible_os_family != 'Windows'
      shell: "dmidecode -s system-serial-number"
      register: serial_output
      changed_when: false

    - name: Set common hardware facts
      set_fact:
        serial_number: >-
          {% if ansible_os_family != 'Windows' %}
            {{ serial_output.stdout | default('Unknown') | trim }}
          {% else %}
            {{ ansible_product_serial_number | default('Unknown') }}
          {% endif %}
        mac_address: "{{ ansible_default_ipv4.macaddress | default('') }}"
        ram_mb_used: "{{ ansible_memory_mb.real.used | default(0) }}"
        ram_mb_total: "{{ ansible_memory_mb.real.total | default(0) }}"
        ram_used_pct: "{{ ((ansible_memory_mb.real.used | default(0)) * 100) // (ansible_memory_mb.real.total | default(1)) }}"

    - name: Collect asset data
      set_fact:
        asset_data: {
          "hostname": "{{ ansible_hostname }}",
          "ip_address": "{{ ansible_default_ipv4.address | default('') }}",
          "mac_address": "{{ mac_address }}",
          "cpu_model": "{{ cpu_model }}",
          "cpu_generation": "{{ cpu_generation }}",
          "ram_mb_used": "{{ ram_mb_used }}",
          "ram_mb_total": "{{ ram_mb_total }}",
          "ram_used_pct": "{{ ram_used_pct }}",
          "serial_number": "{{ serial_number }}",
          "disk_info": "{{ ansible_devices | default({}) }}",
          "os": "{{ ansible_distribution ~ ' ' ~ ansible_distribution_version | default('Unknown') }}",
          "kernel": "{{ ansible_kernel | default('') }}"
        }

    - name: Save asset inventory to JSON on client
      copy:
        dest: "{{ output_dir }}/asset_{{ inventory_hostname }}.json"
        content: "{{ asset_data | to_nice_json }}"
        mode: '0644'

    #########################################################################
    # üîÅ Copy JSON to Central Exporter Directory
    #########################################################################

    - name: Create folder on exporter/controller node
      delegate_to: localhost
      run_once: true
      file:
        path: /opt/awx-inventory-facts/
        state: directory
        mode: '0755'

    - name: Fetch JSON from host to exporter directory
      fetch:
        src: "{{ output_dir }}/asset_{{ inventory_hostname }}.json"
        dest: "/opt/awx-inventory-facts/"
        flat: yes
